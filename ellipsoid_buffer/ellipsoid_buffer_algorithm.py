# -*- coding: utf-8 -*-

"""
/***************************************************************************
 EllipsoidBuffer
                                 A QGIS plugin
 Generate buffer in ellipsoid
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-26
        copyright            : (C) 2023 by Alex RL
        email                : contact on github
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Alex RL'
__date__ = '2023-05-26'
__copyright__ = '(C) 2023 by Alex RL'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,QgsCoordinateTransform,QgsCoordinateReferenceSystem,QgsGeometry,QgsGeometryCollection,QgsWkbTypes,
                       QgsFeatureSink,QgsProcessingParameterDistance,QgsProcessingParameterEnum,QgsProcessingParameterBoolean,
                       QgsProcessingException,QgsProcessingParameterCrs,QgsProject,QgsProcessingException,QgsMultiPolygon,
                       QgsProcessingAlgorithm,QgsPointXY,QgsPolygon,QgsLineString,QgsPoint,
                       QgsProcessingParameterFeatureSource,QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink)
from qgis import processing
from pyproj import Proj,Geod #https://pyproj4.github.io/pyproj/stable/api/geod.html#pyproj.Geod.fwd
from geographiclib.geodesic import Geodesic #if fail run install script?


#//https://sourceforge.net/p/saga-gis/code/ci/master/tree/saga-gis/src/tools/shapes/shapes_tools/shapes_buffer.cpp

parlist = ['a','b','k']
geoparams={'a':'a','b':'b','k':'f'}

try:
    polyt= Qgis.WkbType.PolygonGeomettry
    mpolyt= Qgis.WktType.MultiPolygon
except:
    polyt=QgsWkbTypes.Polygon
    mpolyt = QgsWkbTypes.MultiPolygon

def pts2qgeom(ptslist,feedback):
    feedback.pushInfo(str(ptslist))
    multipoly = QgsMultiPolygon()
    if isinstance(ptslist[0],list):#nested lists
        for ptys in ptslist:
            multipoly.addGeometry(QgsPolygon(QgsLineString(ptys)))
    else:
        multipoly.addGeometry(QgsPolygon(QgsLineString(ptslist)))
    return(QgsGeometry.fromWkt(multipoly.asWkt()))

def buffer (geometry,distancem,srcCrs,destCrs,feedback,dissolve=True,flatcap=False,precision=1.0):
    if distancem == 0.0:
        return(geometry)
    geoid = destCrs.toGeographicCrs()#ellipsoidAcronym())
    if not(geoid.isValid):
        raise QgsProcessingException("invalid crs")
    fwdtrsctx = QgsCoordinateTransform(srcCrs,geoid, QgsProject.instance())
    revtrsctx = QgsCoordinateTransform(geoid,srcCrs , QgsProject.instance())
    result=geometry.transform(fwdtrsctx)
    if not(result or geometry.isGeosValid() ):
        raise QgsProcessingException("Failed to transform")
    crsvars=dict({tuple( i[1:].split('=')) for i in  destCrs.toProj().split(' ') if '=' in i})
    if 'ellps' in crsvars:
        geodes = Geod(crsvars['ellps'])#Geodesic.WGS84
    else: #https://proj.org/en/9.2/usage/ellipsoids.html
        elkwg = dict((geoparams.get(b),float(crsvars.get(b))) for b in parlist if b in crsvars )
        #feedback.pushInfo(str(elkwg))
        geodes = Geod(**elkwg)#Geodesic(equatrad,flattening) #Geodesic(6378388, 1/297.0)

    buffered=_buffer(geometry.asGeometryCollection(),distancem,geodes,flatcap,feedback,precision)
    if not(isinstance(buffered,list)):
        buffered.transform(revtrsctx)
        return(buffered)
    if ( dissolve):
        buffered= QgsGeometry.unaryUnion(buffered)
    retgeom =QgsGeometry()
    feedback.pushInfo(str(len(buffered)))
    for buff in buffered:
        #feedback.pushInfo(buff.asWkt())
        buff.transform(revtrsctx)
        if buff.isMultipart():
            ok= buff.convertToSingleType()
            feedback.pushInfo(str(ok))
        #feedback.pushInfo(buff.asWkt())
        retgeom.addPartGeometry(buff)
    #feedback.pushInfo(retgeom.asWkt())
    if not(retgeom.isGeosValid() ) :
        feedback.pushInfo("geom is invalid")
        feedback.pushInfo(retgeom.asWkt())
        #raise QgsProcessingException("could not transform back resulting geometry")
    return(retgeom)

def _buffer (geometry,distancem:float,geoid:Geod,flat:bool,feedback,precision):
    if isinstance(geometry,list):
        if len(geometry)>1:
            buffered_coll=[]
            for geom in  geometry:
                buffered=_buffer( geom,distancem,geoid,flat,feedback,precision)
                buffered_coll.append(buffered)
            return(buffered_coll)
        geometry=geometry[0] #//QgsGeometry
    if geometry.isMultipart():
        buffered_coll=[]
        for part in  geometry.parts():
            buffered=_buffer( part,distancem,geoid,flat,feedback,precision)
            buffered_coll.append(buffered)
        return(buffered_coll)
    previousVertex=None
    previousAz = None
    buffered=list()
    for ix,vertex in enumerate(geometry.vertices()):
        if (ix==0):
            previousVertex=vertex
            #  continue
        newbuff=buff_line(previousVertex,vertex,distancem,geoid,feedback,flatstart = flat and ix ==1,flatend=flat,precision=precision)
        buffered.append(newbuff)
        previousVertex=vertex

    v0 = geometry.vertexAt(0)
    if (geometry.wkbType() == polyt):
        if ( previousVertex != v0 ):
            buffered.append(buff_line(previousVertex, v0,distancem,geoid,feedback,precision=precision))
        buffered = QgsGeometry.unaryUnion(buffered)
        #//check outside and inside range? process as line and merge with polygon, if buffer is negative?
        #// buffer as line
        if distancem < 0.0:
            buffered=geometry.difference(buffered)
        else:
            buffered= QgsGeometry.unaryUnion([buffered,geometry])
    elif (ix == 0): # point
        feedback.pushInfo(str(v0.x()))
        buffered=make_arc(v0,distancem,geoid,feedback,precision=precision)
        buffered = pts2qgeom(buffered,feedback)
        #make points at given interval/precision
    else:
        buffered =  QgsGeometry.unaryUnion(buffered)
    return(buffered) #need to reproject

def buff_line(p1,p2,distance,geoid:Geod,feedback,flatstart:bool=False,flatend:bool=False,precision=1.0):

    az=geoid.inv(p1.x(), p1.y(), p2.x(), p2.y())[0] #,caps=512
    lim=abs(az)+90.0

    startarc= make_arc(p1,distance,geoid,feedback,lim,lim+180.0,180.0 if flatstart else precision)
    endarc= make_arc(p2,distance,geoid,feedback,lim,lim-180.0,180.0 if flatend else precision) #to fix
    #//join arcs
    feedback.pushInfo(str(startarc))
    feedback.pushInfo(str(endarc))
    return(pts2qgeom([startarc+endarc+[startarc[0],]],feedback) )


 #//https://geographiclib.sourceforge.io/Python/doc/code.html#geographiclib.geodesic.Geodesic.Direct
def make_arc(srcPnt,distance,geoid:Geod,feedback,start:float=0.0,end:float=360.0,precision:float=1.0):
    arc=[]
    feedback.pushInfo(str(start))
    feedback.pushInfo(str(end))
    steps = int((end-start)/precision)
    feedback.pushInfo(str(steps))
    for az in range(abs(steps)+1):
        angle = (start+(az*precision))
        #feedback.pushInfo(str(angle))
        rlong,rlat,raz=geoid.fwd(srcPnt.x(),srcPnt.y(),angle,distance)#,return_back_azimuth =False)
        arc.append(QgsPointXY(rlong,rlat))
    return(arc)


class EllipsoidBufferAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    DISTM = 'DISTM'
    ELLIPSOID = 'ELLIPSOID'
    INPUT = 'INPUT'
    DISSB = 'DISSB'
    ENDSTYLE = 'ENDSTYLE'
    PRECISION='PRECISION'
    Capstyle = ['Round','Flat']

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(QgsProcessingParameterDistance(self.DISTM,self.tr('Distance Meter'),defaultValue=100.0)
        )

        self.addParameter(QgsProcessingParameterEnum(self.ENDSTYLE,self.tr('End style'),self.Capstyle,allowMultiple=False,
                                                      defaultValue=0))

        self.addParameter(QgsProcessingParameterBoolean(self.DISSB,self.tr("Dissolve features"),False))

        self.addParameter(QgsProcessingParameterCrs(self.ELLIPSOID,self.tr("Ellipsoid to use"),defaultValue= None
                        ,optional = True))

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )
        
        self.addParameter(QgsProcessingParameterNumber(self.PRECISION,self.tr("Precision"),QgsProcessingParameterNumber.Double,defaultValue=1.0))

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, source.fields(), mpolyt, source.sourceCrs())

        distancem = self.parameterAsDouble(parameters, self.DISTM, context)
        interimCrs = self.parameterAsCrs(parameters, self.ELLIPSOID, context)
        capstyle = self.parameterAsEnum(parameters,self.ENDSTYLE,context)
        if capstyle == 1 :
            flatEnd =True
        else:
            flatEnd = False
        dissolveB = self.parameterAsBoolean(parameters,self.DISSB,context)
        precision = self.parameterAsDouble(parameters,self.PRECISION,context)
        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        currentCrs =  source.sourceCrs()

        if interimCrs.isValid():
            Ellipsoid = interimCrs
        else:
            Ellipsoid = currentCrs

        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            oldgeometry=feature.geometry()
            buffered= buffer(oldgeometry,distancem,currentCrs, Ellipsoid,feedback,dissolveB,flatEnd,precision)

            feature.setGeometry(buffered)

            # Add a feature in the sink
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Ellipsoid buffer'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Vector Geometry'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return EllipsoidBufferAlgorithm()
